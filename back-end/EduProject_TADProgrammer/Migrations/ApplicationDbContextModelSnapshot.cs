// <auto-generated />
using System;
using EduProject_TADProgrammer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EduProject_TADProgrammer.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.AISuggestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("AISuggestions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Đề xuất thêm tính năng phân tích dữ liệu thời gian thực.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2777),
                            Type = "PROJECT",
                            UserId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Điểm nội dung có thể tăng nếu bổ sung tài liệu tham khảo.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2783),
                            ProjectId = 1L,
                            Type = "GRADE"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Backup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.ToTable("Backups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2896),
                            FilePath = "backups/db_backup_2025_02_01.sql"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 10, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2898),
                            FilePath = "backups/db_backup_2025_02_02.sql"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2715),
                            EndTime = new DateTime(2025, 2, 10, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            EventTitle = "Họp nhóm",
                            StartTime = new DateTime(2025, 2, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2719),
                            EndTime = new DateTime(2025, 2, 28, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            EventTitle = "Nộp bài",
                            GroupId = 1L,
                            StartTime = new DateTime(2025, 2, 28, 23, 59, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.CodeRun", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float?>("PlagiarismScore")
                        .HasColumnType("real");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("CodeRuns");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Code = "print('Hello World')",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(923),
                            Language = "Python",
                            PlagiarismScore = 0.1f,
                            Result = "Success",
                            SubmissionId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Code = "public class Main { public static void main(String[] args) { System.out.println('Hello'); } }",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(927),
                            Language = "Java",
                            PlagiarismScore = 0.2f,
                            Result = "Success",
                            SubmissionId = 2L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.CommitteeMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CommitteeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("LecturerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CommitteeId");

                    b.HasIndex("LecturerId");

                    b.ToTable("CommitteeMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CommitteeId = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1538),
                            LecturerId = 2L,
                            Role = "Chủ tịch"
                        },
                        new
                        {
                            Id = 2L,
                            CommitteeId = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1541),
                            LecturerId = 4L,
                            Role = "Thành viên"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(150),
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Đồ án Tốt nghiệp CNTT",
                            Semester = "HK2-2025",
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(153),
                            EndDate = new DateTime(2025, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Đồ án Cơ sở CNTT",
                            Semester = "HK2-2025",
                            StartDate = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.DefenseCommittee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DefenseCommittees");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1483),
                            Name = "Hội đồng 1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1486),
                            Name = "Hội đồng 2"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.DefenseSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Room")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("DefenseSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1589),
                            EndTime = new DateTime(2025, 3, 1, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = 1L,
                            Room = "A101",
                            StartTime = new DateTime(2025, 3, 1, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1594),
                            EndTime = new DateTime(2025, 3, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            ProjectId = 2L,
                            Room = "A102",
                            StartTime = new DateTime(2025, 3, 2, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Discussion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Votes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Discussions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Có ai biết cách tích hợp AI vào ứng dụng y tế?",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2212),
                            ProjectId = 1L,
                            Title = "Hỏi về AI trong y tế",
                            UserId = 7L,
                            Votes = 5
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Nên dùng framework nào cho giao diện?",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2216),
                            Title = "Thắc mắc về thiết kế giao diện",
                            UserId = 9L,
                            Votes = 3
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.FAQ", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Category");

                    b.ToTable("FAQs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Answer = "Đăng nhập, vào mục Nộp bài, tải file lên.",
                            Category = "Nộp bài",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2021),
                            Question = "Làm thế nào để nộp đồ án?"
                        },
                        new
                        {
                            Id = 2L,
                            Answer = "Xem lịch bảo vệ trong mục Lịch.",
                            Category = "Bảo vệ",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2024),
                            Question = "Thời gian bảo vệ là khi nào?"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Feedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("LecturerId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("SubmissionId");

                    b.ToTable("Feedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Cần cải thiện phần phân tích dữ liệu.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(865),
                            LecturerId = 4L,
                            SubmissionId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Tốt, nhưng cần bổ sung tài liệu tham khảo.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(868),
                            LecturerId = 5L,
                            SubmissionId = 2L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.FeedbackSurvey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FeedbackSurveys");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Hệ thống dễ sử dụng.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2313),
                            Rating = 4,
                            UserId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Cần cải thiện tốc độ tải.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2316),
                            Rating = 3,
                            UserId = 8L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Grade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CriteriaId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("GradedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("GradedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CriteriaId");

                    b.HasIndex("GradedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "Nội dung tốt.",
                            CriteriaId = 1L,
                            GradedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1170),
                            GradedBy = 4L,
                            GroupId = 1L,
                            ProjectId = 1L,
                            Score = 8.5f
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Trình bày rõ ràng.",
                            CriteriaId = 2L,
                            GradedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1173),
                            GradedBy = 4L,
                            GroupId = 1L,
                            ProjectId = 1L,
                            Score = 8f
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeAppeal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Response")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("StudentId");

                    b.ToTable("GradeAppeals");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1423),
                            GradeId = 1L,
                            Reason = "Điểm nội dung chưa hợp lý.",
                            Status = "PENDING",
                            StudentId = 7L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeCriteria", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("GradeCriteria");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            Description = "Chất lượng nội dung đồ án.",
                            Name = "Nội dung",
                            Weight = 0.4f
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 1L,
                            Description = "Cách trình bày báo cáo.",
                            Name = "Trình bày",
                            Weight = 0.3f
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 1L,
                            Description = "Kỹ năng bảo vệ.",
                            Name = "Bảo vệ",
                            Weight = 0.3f
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<long>("LecturerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("LecturerId");

                    b.ToTable("GradeLogs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Action = "CREATE",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1314),
                            Details = "Tạo điểm cho nhóm 1.",
                            GradeId = 1L,
                            LecturerId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            Action = "UPDATE",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1318),
                            Details = "Cập nhật điểm nhóm 1.",
                            GradeId = 1L,
                            LecturerId = 4L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<long>("LecturerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LecturerId");

                    b.HasIndex("ProjectId");

                    b.ToTable("GradeSchedules");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1362),
                            Deadline = new DateTime(2025, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LecturerId = 4L,
                            ProjectId = 1L,
                            Status = "PENDING"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1366),
                            Deadline = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LecturerId = 5L,
                            ProjectId = 2L,
                            Status = "PENDING"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("GradeId")
                        .HasColumnType("bigint");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.ToTable("GradeVersions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "Phiên bản đầu.",
                            CreatedAt = new DateTime(2025, 5, 10, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1251),
                            GradeId = 1L,
                            Score = 8f,
                            VersionNumber = 1
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Cập nhật điểm.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1256),
                            GradeId = 1L,
                            Score = 8.5f,
                            VersionNumber = 2
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(404),
                            Name = "Nhóm 1",
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(408),
                            Name = "Nhóm 2",
                            ProjectId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(410),
                            Name = "Nhóm 3",
                            ProjectId = 3L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GroupMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupMembers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            GroupId = 1L,
                            JoinedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(470),
                            StudentId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            GroupId = 1L,
                            JoinedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(473),
                            StudentId = 8L
                        },
                        new
                        {
                            Id = 3L,
                            GroupId = 2L,
                            JoinedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(476),
                            StudentId = 9L
                        },
                        new
                        {
                            Id = 4L,
                            GroupId = 3L,
                            JoinedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(478),
                            StudentId = 10L
                        },
                        new
                        {
                            Id = 5L,
                            GroupId = 3L,
                            JoinedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(480),
                            StudentId = 11L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GroupRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentId");

                    b.ToTable("GroupRequests");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(554),
                            GroupId = 1L,
                            Status = "PENDING",
                            StudentId = 9L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(557),
                            GroupId = 2L,
                            Status = "APPROVED",
                            StudentId = 10L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Log", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Action = "LOGIN",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2835),
                            Details = "Admin đăng nhập hệ thống.",
                            UserId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Action = "SUBMISSION",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2838),
                            Details = "Sinh viên nộp bài cho đồ án 1.",
                            UserId = 7L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Meeting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.ToTable("Meetings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1661),
                            CreatedBy = 4L,
                            EndTime = new DateTime(2025, 2, 10, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = 1L,
                            Location = "Phòng B101",
                            StartTime = new DateTime(2025, 2, 10, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Họp nhóm tuần 1"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1666),
                            CreatedBy = 5L,
                            EndTime = new DateTime(2025, 2, 17, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            GroupId = 2L,
                            Location = "Online",
                            StartTime = new DateTime(2025, 2, 17, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Họp nhóm tuần 2"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.MeetingRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("MeetingId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.ToTable("MeetingRecords");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1724),
                            FilePath = "records/meeting1.mp3",
                            MeetingId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1727),
                            FilePath = "records/meeting2.mp4",
                            MeetingId = 2L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Hạn nộp là 28/02/2025.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1786),
                            Status = "SENT",
                            Title = "Hạn nộp đồ án",
                            Type = "WEB",
                            UserId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Bài nộp đã được phản hồi.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1790),
                            Status = "SENT",
                            Title = "Phản hồi bài nộp",
                            Type = "EMAIL",
                            UserId = 9L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.PeerReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("RevieweeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReviewerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("RevieweeId");

                    b.HasIndex("ReviewerId");

                    b.ToTable("PeerReviews");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Comment = "Làm việc tốt.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1843),
                            GroupId = 1L,
                            RevieweeId = 8L,
                            ReviewerId = 7L,
                            Score = 8
                        },
                        new
                        {
                            Id = 2L,
                            Comment = "Cần cải thiện giao tiếp.",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1847),
                            GroupId = 1L,
                            RevieweeId = 7L,
                            ReviewerId = 8L,
                            Score = 7
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LecturerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("LecturerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(241),
                            Description = "Phát triển ứng dụng AI hỗ trợ chẩn đoán bệnh.",
                            LecturerId = 4L,
                            Status = "APPROVED",
                            Title = "Ứng dụng AI trong y tế",
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(242)
                        },
                        new
                        {
                            Id = 2L,
                            CourseId = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(247),
                            Description = "Xây dựng hệ thống quản lý đồ án sinh viên.",
                            LecturerId = 5L,
                            Status = "PENDING",
                            Title = "Hệ thống quản lý đồ án",
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(248)
                        },
                        new
                        {
                            Id = 3L,
                            CourseId = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(251),
                            Description = "Phát triển website bán hàng trực tuyến.",
                            LecturerId = 6L,
                            Status = "APPROVED",
                            Title = "Ứng dụng thương mại điện tử",
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(252)
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.ProjectVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectVersions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(321),
                            Description = "Phiên bản ban đầu.",
                            ProjectId = 1L,
                            Title = "Ứng dụng AI trong y tế",
                            VersionNumber = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 10, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(324),
                            Description = "Cập nhật mô tả.",
                            ProjectId = 1L,
                            Title = "Ứng dụng AI trong y tế (Cập nhật)",
                            VersionNumber = 2
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ProjectId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Content = "Ứng dụng AI của bạn giải quyết vấn đề gì?",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1963),
                            CreatedBy = 4L,
                            ProjectId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Content = "Hệ thống quản lý đồ án có những tính năng gì?",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1966),
                            CreatedBy = 5L,
                            ProjectId = 2L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Resources");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1899),
                            CreatedBy = 4L,
                            FilePath = "resources/ai_doc.pdf",
                            ProjectId = 1L,
                            Title = "Tài liệu AI",
                            Type = "REFERENCE"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(1904),
                            CreatedBy = 5L,
                            FilePath = "resources/report_template.docx",
                            GroupId = 2L,
                            Title = "Mẫu báo cáo",
                            Type = "SAMPLE"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Description = "Quản trị viên",
                            Name = "ROLE_ADMIN"
                        },
                        new
                        {
                            Id = 2L,
                            Description = "Giảng viên hướng dẫn",
                            Name = "ROLE_LECTURER_GUIDE"
                        },
                        new
                        {
                            Id = 3L,
                            Description = "Sinh viên",
                            Name = "ROLE_STUDENT"
                        },
                        new
                        {
                            Id = 4L,
                            Description = "Trưởng bộ môn",
                            Name = "ROLE_HEAD"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.SkillAssessment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("SkillAssessments");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2435),
                            Score = 8,
                            Skill = "Lập trình Python",
                            StudentId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2439),
                            Score = 7,
                            Skill = "Thiết kế giao diện",
                            StudentId = 8L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Submission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Submissions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FilePath = "submissions/dt001.pdf",
                            GroupId = 1L,
                            ProjectId = 1L,
                            Status = "SUBMITTED",
                            SubmittedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(733),
                            Version = 1
                        },
                        new
                        {
                            Id = 2L,
                            FilePath = "submissions/dt002.pdf",
                            GroupId = 2L,
                            ProjectId = 2L,
                            Status = "VALIDATED",
                            SubmittedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(737),
                            Version = 1
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.SubmissionVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("SubmissionId")
                        .HasColumnType("bigint");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubmissionId");

                    b.ToTable("SubmissionVersions");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(799),
                            FilePath = "submissions/dt001_v1.pdf",
                            SubmissionId = 1L,
                            VersionNumber = 1
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 10, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(803),
                            FilePath = "submissions/dt001_v2.pdf",
                            SubmissionId = 1L,
                            VersionNumber = 2
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.SystemConfig", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("SystemConfigs");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2581),
                            Key = "LOGO_URL",
                            Value = "images/hutech_logo.png"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2585),
                            Key = "THEME_COLOR",
                            Value = "#1976d2"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.SystemMetric", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetricType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MetricType");

                    b.ToTable("SystemMetrics");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2643),
                            MetricType = "CPU",
                            Value = 45.5f
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2646),
                            MetricType = "RAM",
                            Value = 60f
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(635),
                            Deadline = new DateTime(2025, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Phân tích yêu cầu hệ thống AI.",
                            GroupId = 1L,
                            ProjectId = 1L,
                            Status = "TODO",
                            Title = "Phân tích yêu cầu"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(641),
                            Deadline = new DateTime(2025, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Thiết kế giao diện quản lý đồ án.",
                            ProjectId = 2L,
                            Status = "IN_PROGRESS",
                            StudentId = 9L,
                            Title = "Thiết kế giao diện"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.TimeTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("StudentId");

                    b.ToTable("TimeTrackings");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2513),
                            Duration = 120,
                            EndTime = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2510),
                            ProjectId = 1L,
                            StartTime = new DateTime(2025, 5, 11, 12, 39, 4, 550, DateTimeKind.Utc).AddTicks(2505),
                            StudentId = 7L
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2519),
                            Duration = 60,
                            EndTime = new DateTime(2025, 5, 11, 14, 39, 4, 550, DateTimeKind.Utc).AddTicks(2517),
                            ProjectId = 1L,
                            StartTime = new DateTime(2025, 5, 11, 13, 39, 4, 550, DateTimeKind.Utc).AddTicks(2516),
                            StudentId = 8L
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClassCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Locked")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9928),
                            Email = "admin@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Quản trị viên",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 1L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9929),
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9935),
                            Email = "head1@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Nguyễn Văn Hùng",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 4L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9936),
                            Username = "head1"
                        },
                        new
                        {
                            Id = 3L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9941),
                            Email = "head2@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Trần Thị Lan",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 4L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9941),
                            Username = "head2"
                        },
                        new
                        {
                            Id = 4L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9945),
                            Email = "lecturer1@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Lê Văn Nam",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 2L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9946),
                            Username = "lecturer1"
                        },
                        new
                        {
                            Id = 5L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9950),
                            Email = "lecturer2@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Phạm Thị Mai",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 2L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9950),
                            Username = "lecturer2"
                        },
                        new
                        {
                            Id = 6L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9954),
                            Email = "lecturer3@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Hoàng Văn Tùng",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 2L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9955),
                            Username = "lecturer3"
                        },
                        new
                        {
                            Id = 7L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            ClassCode = "21DTHA1",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9958),
                            Email = "student1@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Nguyễn Tri Bão Thắng",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 3L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9959),
                            Username = "student1"
                        },
                        new
                        {
                            Id = 8L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            ClassCode = "21DTHA1",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9983),
                            Email = "student2@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Trần Văn Bình",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 3L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9984),
                            Username = "student2"
                        },
                        new
                        {
                            Id = 9L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            ClassCode = "21DTHA1",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9987),
                            Email = "student3@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Lê Thị Cẩm",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 3L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9988),
                            Username = "student3"
                        },
                        new
                        {
                            Id = 10L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            ClassCode = "21DTHA1",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9992),
                            Email = "student4@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Phạm Văn Đức",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 3L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9992),
                            Username = "student4"
                        },
                        new
                        {
                            Id = 11L,
                            AvatarUrl = "/static/medit/imgUser/avatar.jpg",
                            ClassCode = "21DTHA1",
                            CreatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9996),
                            Email = "student5@hutech.edu.vn",
                            FailedLoginAttempts = 0,
                            FullName = "Hoàng Thị Em",
                            Locked = false,
                            Password = "$2a$11$4ZFHM8rBy./u3RYDFECsxuu3I2nVkiXpwcbIaPFiQ9nP6aLSso99W",
                            RoleId = 3L,
                            UpdatedAt = new DateTime(2025, 5, 11, 14, 39, 4, 549, DateTimeKind.Utc).AddTicks(9997),
                            Username = "student5"
                        });
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.AISuggestion", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Calendar", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.CodeRun", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.CommitteeMember", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.DefenseCommittee", "Committee")
                        .WithMany()
                        .HasForeignKey("CommitteeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Committee");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.DefenseSchedule", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Discussion", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Feedback", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.FeedbackSurvey", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Grade", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.GradeCriteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "GradedByUser")
                        .WithMany()
                        .HasForeignKey("GradedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Criteria");

                    b.Navigation("GradedByUser");

                    b.Navigation("Group");

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeAppeal", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeCriteria", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeLog", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeSchedule", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lecturer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GradeVersion", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Group", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GroupMember", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.GroupRequest", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Log", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Meeting", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.MeetingRecord", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Meeting", "Meeting")
                        .WithMany()
                        .HasForeignKey("MeetingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meeting");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Notification", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.PeerReview", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Reviewee")
                        .WithMany()
                        .HasForeignKey("RevieweeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Reviewee");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Project", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.ProjectVersion", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Question", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Resource", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CreatedByUser");

                    b.Navigation("Group");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.SkillAssessment", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Submission", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.SubmissionVersion", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Submission", "Submission")
                        .WithMany()
                        .HasForeignKey("SubmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Submission");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.Task", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Group");

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.TimeTracking", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EduProject_TADProgrammer.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EduProject_TADProgrammer.Entities.User", b =>
                {
                    b.HasOne("EduProject_TADProgrammer.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
